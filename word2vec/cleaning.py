import sys

def read_file(filepath):
    try:
        with open(filepath, "r", encoding="utf-8") as file:
            return file.read()
    except IOError as e:
        print(f"Error reading file {filepath}: {e}")
        sys.exit(1)

def write_file(filepath, contents):
    try:
        with open(filepath, "w", encoding="utf-8") as file:
            file.write(contents)
    except IOError as e:
        print(f"Error writing file {filepath}: {e}")
        sys.exit(1)

def replace_tabs(contents):
    return contents.replace('\t', '    ')

def remove_pattern(contents, pattern, cut_before, cut_after):
    while pattern in contents:
        pos = contents.find(pattern)
        contents = contents[:pos - cut_before] + contents[pos + cut_after:]
    return contents

def clean_section(contents, marker, window_size, start_keywords, end_keywords):
    fromhere = 0
    while marker in contents[fromhere:]:
        pos = fromhere + contents[fromhere:].find(marker)
        area = contents[pos - window_size:pos + window_size]
        start = max(area[:window_size].find(key) for key in start_keywords)
        end = min(area[window_size:].find(key) for key in end_keywords if key in area[window_size:])
        if start != -1 and end != -1:
            contents = contents[:pos - window_size + start] + contents[pos + window_size + end:]
            fromhere = pos - window_size + start + end + 1
        else:
            fromhere = pos + window_size
    return contents

def clean_badstrings(contents, badstrings):
    for badstring in badstrings:
        while badstring in contents:
            pos = contents.find(badstring)
            area = contents[pos - 500:pos + 1000]
            if "db.create_table" in area:
                contents = contents.replace("('id', models.AutoField(primary_key=True))",
                                            "('id', models.AutoField(primary_key=False))", 1)
                continue
            start = area.find("class")
            end = min(area.find(x) for x in ["from", "import"] if x in area)
            if end > start:
                contents = contents[:pos - 500 + start] + contents[pos - 500 + end:]
    return contents

def process_file(input_file, output_file):
    contents = read_file(input_file)
    contents = replace_tabs(contents)

    # Removing specific patterns
    patterns = [
        ('PositiveSmallIntegerField(\n                choices', 198, 178),
        ("raise ImportError,self.__dict__.get('_ppimport_exc_info')[1]", 0, len("raise ImportError,self.__dict__.get('_ppimport_exc_info')[1]") + 1),
        ("[k]*step+start)", 0, 21)
    ]
    for pattern, cut_before, cut_after in patterns:
        contents = remove_pattern(contents, pattern, cut_before, cut_after)

    # Cleaning sections
    markers = ["check_framework.Model2.", "DEFAULT_KMS_KEY_NAME", "somepassword"]
    start_keywords = ["class", "def", "from", "import"]
    end_keywords = ["def", "from", "import"]
    for marker in markers:
        contents = clean_section(contents, marker, 300, start_keywords, end_keywords)

    # Cleaning bad strings
    badstrings = ["silly_field", "('id', models.AutoField(primary_key=True))"]
    contents = clean_badstrings(contents, badstrings)

    write_file(output_file, contents)

process_file("pythontraining.txt", "w2v/pythontraining_edit.txt")
